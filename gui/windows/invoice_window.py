# –û–∫–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞
import tkinter as tk
from tkinter import ttk, messagebox

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from core.database import find_client
from core.document_generator import generate_invoice
from config.settings import WINDOW_WIDTH, ENTRY_WIDTH


def open_invoice_window(parent):
    """
    –û–∫–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    :param parent: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    """
    window = tk.Toplevel(parent)
    window.title("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç")
    window.geometry(f"{WINDOW_WIDTH}x400")
    window.resizable(False, False)
    window.transient(parent)
    window.grab_set()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
    window.columnconfigure(1, weight=1)

    row_idx = 0

    # --- 1. –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ ---
    ttk.Label(window, text="–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –§–ò–û/VIN:").grid(
        row=row_idx, column=0, padx=(10, 5), pady=15, sticky="e"
    )
    search_entry = ttk.Entry(window, width=ENTRY_WIDTH)
    search_entry.grid(row=row_idx, column=1, padx=(0, 10), pady=15, sticky="ew")
    search_entry.focus()
    row_idx += 1

    # --- 2. –£—Å–ª—É–≥–∞ ---
    ttk.Label(window, text="–£—Å–ª—É–≥–∞:").grid(
        row=row_idx, column=0, padx=(10, 5), pady=10, sticky="e"
    )
    service_var = tk.StringVar(value="sbkts")
    ttk.Radiobutton(window, text="–í—ã–ø—É—Å–∫ –°–ë–ö–¢–° + –≠–ü–¢–°", variable=service_var, value="sbkts").grid(
        row=row_idx, column=1, sticky="w", padx=(0, 10))
    row_idx += 1
    ttk.Radiobutton(window, text="–°–ø–∏—Å–∞–Ω–∏–µ —É—Ç–∏–ª—å—Å–±–æ—Ä–∞", variable=service_var, value="scrap").grid(
        row=row_idx, column=1, sticky="w", padx=(0, 10))
    row_idx += 1

    # --- 3. –°—Ç–æ–∏–º–æ—Å—Ç—å ---
    ttk.Label(window, text="–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±):").grid(
        row=row_idx, column=0, padx=(10, 5), pady=10, sticky="e"
    )
    amount_entry = ttk.Entry(window, width=ENTRY_WIDTH)
    amount_entry.insert(0, "32000")  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    amount_entry.grid(row=row_idx, column=1, padx=(0, 10), pady=10, sticky="ew")
    row_idx += 1

    # --- 4. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ---
    ttk.Label(window, text="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:").grid(
        row=row_idx, column=0, padx=(10, 5), pady=10, sticky="e"
    )
    payment_var = tk.StringVar(value="account")
    ttk.Radiobutton(window, text="–ù–∞ —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç", variable=payment_var, value="account").grid(
        row=row_idx, column=1, sticky="w", padx=(0, 10))
    row_idx += 1
    ttk.Radiobutton(window, text="–ù–∞ –∫–∞—Ä—Ç—É", variable=payment_var, value="card").grid(
        row=row_idx, column=1, sticky="w", padx=(0, 10))
    row_idx += 1

    def issue_invoice():
        search_term = search_entry.get().strip()
        service = service_var.get()
        try:
            amount = int(amount_entry.get().strip())
            if amount <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
            return

        if not search_term:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞, –§–ò–û –∏–ª–∏ VIN.")
            return

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "101-–ò–ü"
        if "-–ò–ü" not in search_term:
            search_term_for_search = search_term + "-–ò–ü"
        else:
            search_term_for_search = search_term

        # –ü–æ–∏—Å–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ (–ø–æ –Ω–æ–º–µ—Ä—É) –∏–ª–∏ –ø–æ –§–ò–û/VIN
        from core.database import pd
        try:
            contracts_df = pd.read_excel("data/contracts_registry.xlsx", sheet_name="Registry")
            contract_match = contracts_df[
                contracts_df["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"].astype(str) == search_term_for_search
                ]
            if not contract_match.empty:
                # –ù–∞—à–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä–∞ ‚Üí –∏—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –§–ò–û
                client_fio = contract_match.iloc[0]["–§–ò–û"]
                client_parts = client_fio.split()
                if len(client_parts) >= 1:
                    client_data = find_client(client_parts[0])  # –ø–æ —Ñ–∞–º–∏–ª–∏–∏
                else:
                    client_data = None
            else:
                # –ò—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ –§–ò–û –∏–ª–∏ VIN
                client_data = find_client(search_term)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤:\n{e}")
            return

        if client_data is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        full_name = f"{client_data['–§–∞–º–∏–ª–∏—è']} {client_data['–ò–º—è']} {client_data['–û—Ç—á–µ—Å—Ç–≤–æ']}"
        msg = f"–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç –Ω–∞ {amount} ‚ÇΩ\n—É—Å–ª—É–≥–∞: {service}\n–∫–ª–∏–µ–Ω—Ç—É: {full_name}?"
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", msg):
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—á—ë—Ç–∞
        success = generate_invoice(
            client_data=client_data.to_dict(),
            contract_num=search_term_for_search,
            service_type=service,
            amount=amount,
            payment_method=payment_var.get()
        )

        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            window.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –≤ –ø–∞–ø–∫–µ 'templates/'.")

    # --- –ö–Ω–æ–ø–∫–∏ ---
    button_frame = ttk.Frame(window)
    button_frame.grid(row=row_idx + 1, column=0, columnspan=2, pady=20)

    ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=window.destroy).pack(side="left", padx=5)
    ttk.Button(button_frame, text="–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", command=issue_invoice).pack(side="left", padx=5)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
    search_entry.bind("<Return>", lambda event: amount_entry.focus())
    amount_entry.bind("<Return>", lambda event: issue_invoice())
