# –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
import tkinter as tk
from tkinter import ttk, messagebox

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from core.database import find_client, save_contract_record
from core.document_generator import generate_contract
from config.settings import WINDOW_WIDTH, ENTRY_WIDTH


def open_contract_window(parent):
    """
    –û–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
    :param parent: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    """
    window = tk.Toplevel(parent)
    window.title("üìÑ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞")
    window.geometry(f"{WINDOW_WIDTH}x200")
    window.resizable(False, False)
    window.transient(parent)
    window.grab_set()

    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    window.columnconfigure(1, weight=1)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    ttk.Label(window, text="–í–≤–µ–¥–∏—Ç–µ –§–ò–ú, VIN –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:").grid(
        row=0, column=0, padx=(10, 5), pady=30, sticky="e"
    )
    search_entry = ttk.Entry(window, width=ENTRY_WIDTH)
    search_entry.grid(row=0, column=1, padx=(0, 10), pady=30, sticky="ew")
    search_entry.focus()

    def create_contract():
        search_term = search_entry.get().strip()
        if not search_term:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        client_data = find_client(search_term)
        if client_data is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û, VIN –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        full_name = f"{client_data['–§–∞–º–∏–ª–∏—è']} {client_data['–ò–º—è']} {client_data['–û—Ç—á–µ—Å—Ç–≤–æ']}"
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è:\n{full_name}?"):
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
        success = generate_contract(client_data.to_dict())
        if success:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤
            from core.database import get_next_contract_number

            contract_data = {
                "–ù–æ–º–µ—Ä": int(client_data["‚Ññ"]),
                "–§–ò–û": full_name,
                "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞": get_next_contract_number(),
                "–¢–µ–ª–µ—Ñ–æ–Ω": client_data["–¢–µ–ª–µ—Ñ–æ–Ω"],
                "–ò–Ω–¥–µ–∫—Å": client_data["–ò–Ω–¥–µ–∫—Å"],
                "–î–∞—Ç–∞": client_data["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏"]
            }
            save_contract_record(contract_data)

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            window.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω 'contract_template.docx'.")

    # –ö–Ω–æ–ø–∫–∏
    button_frame = ttk.Frame(window)
    button_frame.grid(row=1, column=0, columnspan=2, pady=10)

    ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=window.destroy).pack(side="left", padx=5)
    ttk.Button(button_frame, text="–û—Ñ–æ—Ä–º–∏—Ç—å", command=create_contract).pack(side="left", padx=5)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
    search_entry.bind("<Return>", lambda event: create_contract())
