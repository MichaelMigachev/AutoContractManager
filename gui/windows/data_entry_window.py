# gui/windows/data_entry_window.py
import tkinter as tk
from tkinter import ttk, messagebox

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from core.database import save_client, get_next_client_id
from core.validators import validate_phone, validate_vin
from core.utils import get_current_date, format_phone
from config.settings import WINDOW_WIDTH, ENTRY_WIDTH


def open_data_entry_window(parent):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    :param parent: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (Tk –∏–ª–∏ Toplevel)
    """
    window = tk.Toplevel(parent)
    window.title("‚ûï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
    window.geometry(f"{WINDOW_WIDTH}x600")
    window.resizable(False, False)
    window.transient(parent)
    window.grab_set()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
    window.columnconfigure(1, weight=1)

    # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
    fields_config = [
        ("–§–∞–º–∏–ª–∏—è", "surname"),
        ("–ò–º—è", "name"),
        ("–û—Ç—á–µ—Å—Ç–≤–æ", "patronymic"),
        ("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ", "car_model"),  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        ("VIN", "vin"),              # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        ("–ò–Ω–¥–µ–∫—Å", "index"),         # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        ("–ê–¥—Ä–µ—Å", "address"),
        ("–ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä)", "passport"),
        ("–ö–µ–º –≤—ã–¥–∞–Ω", "issued_by"),
        ("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", "issue_date"),
        ("–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", "dep_code"),
        ("–¢–µ–ª–µ—Ñ–æ–Ω", "phone"),
        ("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "birth_date"),
    ]

    entries: dict = {}

    for i, (label_text, key) in enumerate(fields_config):
        ttk.Label(window, text=label_text + ":").grid(
            row=i, column=0, sticky="e", padx=(10, 5), pady=5
        )
        entry = ttk.Entry(window, width=ENTRY_WIDTH)
        entry.grid(row=i, column=1, padx=(0, 10), pady=5, sticky="ew")
        entries[key] = entry

    # –ü–æ–ª–µ "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è" ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    ttk.Label(window, text="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:").grid(
        row=len(fields_config), column=0, sticky="e", padx=(10, 5), pady=5
    )
    date_entry = ttk.Entry(window, width=ENTRY_WIDTH)
    date_entry.insert(0, get_current_date())
    date_entry.config(state="readonly")
    date_entry.grid(row=len(fields_config), column=1, padx=(0, 10), pady=5, sticky="ew")

    def submit():
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {}
        for (label, key), entry in zip(fields_config, entries.values()):
            value = entry.get().strip()
            data[key] = value

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = {
            "car_model": "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ",
            "vin": "VIN",
            "index": "–ò–Ω–¥–µ–∫—Å"
        }

        for key, label in required_fields.items():
            if not data[key]:
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"–ü–æ–ª–µ '{label}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
                return

        # üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è VIN
        if not validate_vin(data["vin"]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VIN. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤ (A-Z, 0-9).")
            return

        # üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        phone = data["phone"]
        if phone and not validate_phone(phone):
            if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?"):
                return

        # üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        issue_date = data["issue_date"]
        if issue_date:
            from core.validators import validate_date
            if not validate_date(issue_date):
                if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏.\n–í—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?"):
                    return

        # üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        birth_date = data["birth_date"]
        if birth_date:
            from core.validators import validate_date
            if not validate_date(birth_date):
                if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n–í—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?"):
                    return

        # üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        formatted_phone = ""
        phone_index_part = ""
        if phone:
            try:
                formatted_phone, phone_index_part = format_phone(phone)
            except Exception:
                formatted_phone = phone  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

        # üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        folder_name = f"{data['surname']}_{data['car_model']}_vin {data['vin']}_{data['index']}"

        # üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        full_data = {
            "‚Ññ": get_next_client_id(),
            "–§–∞–º–∏–ª–∏—è": data["surname"],
            "–ò–º—è": data["name"],
            "–û—Ç—á–µ—Å—Ç–≤–æ": data["patronymic"],
            "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ": data["car_model"],
            "VIN": data["vin"],
            "–ò–Ω–¥–µ–∫—Å": data["index"],
            "–ü–∞–ø–∫–∞": folder_name,
            "–ê–¥—Ä–µ—Å": data["address"],
            "–ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä)": data["passport"],
            "–ö–µ–º –≤—ã–¥–∞–Ω": data["issued_by"],
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": data["issue_date"],
            "–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è": data["dep_code"],
            "–¢–µ–ª–µ—Ñ–æ–Ω": formatted_phone,
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": data["birth_date"],
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏": get_current_date()
        }

        # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if save_client(full_data):
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
            window.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

    # –ö–Ω–æ–ø–∫–∏
    button_frame = ttk.Frame(window)
    button_frame.grid(row=len(fields_config) + 1, column=0, columnspan=2, pady=20)

    ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=window.destroy).pack(side="left", padx=5)
    ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=submit).pack(side="left", padx=5)

    # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    entries["surname"].focus()
