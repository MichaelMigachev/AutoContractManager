# core/document_generator.py
from openpyxl import load_workbook

from docx import Document
from pathlib import Path
import logging
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config.paths import OUTPUT_DIR, CONTRACT_TEMPLATE, INVOICE_TEMPLATE, INVOICE_CARD_TEMPLATE
from config.settings import (
    APP_NAME,
    COMPANY_NAME,
)
from core.utils import sanitize_filename, get_current_date, number_to_words, get_date_verbose


def replace_placeholders_in_paragraph(paragraph, data: Dict[str, Any]):
    """–ó–∞–º–µ–Ω—è–µ—Ç {–∫–ª—é—á} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ"""
    for key, value in data.items():
        placeholder = f"{{{key}}}"
        if placeholder in paragraph.text:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ run
            for run in paragraph.runs:
                if placeholder in run.text:
                    run.text = run.text.replace(placeholder, str(value))


def replace_placeholders_in_table(table, data: Dict[str, Any]):
    """–ó–∞–º–µ–Ω—è–µ—Ç {–∫–ª—é—á} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                replace_placeholders_in_paragraph(paragraph, data)


def fill_template(template_path: Path, output_path: Path, data: Dict[str, Any]) -> bool:
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω Word –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    :param template_path: –ø—É—Ç—å –∫ .docx —à–∞–±–ª–æ–Ω—É
    :param output_path: –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    :param data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    :return: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    """
    try:
        if not template_path.exists():
            logging.error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return False

        doc = Document(template_path)

        # –ó–∞–º–µ–Ω–∞ –≤ –æ–±—ã—á–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
        for paragraph in doc.paragraphs:
            replace_placeholders_in_paragraph(paragraph, data)

        # –ó–∞–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in doc.tables:
            replace_placeholders_in_table(table, data)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        doc.save(output_path)
        logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False


def generate_contract(client_data: Dict[str, Any]) -> bool:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞

    :param client_data: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Excel
    :return: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    """
    from core.database import get_next_contract_number

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    contract_num = get_next_contract_number()
    full_name = f"{client_data['–§–∞–º–∏–ª–∏—è']} {client_data['–ò–º—è']} {client_data['–û—Ç—á–µ—Å—Ç–≤–æ']}"
    car_info = f"{client_data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ']} (VIN {client_data['VIN']})"
    phone, _ = client_data.get("–¢–µ–ª–µ—Ñ–æ–Ω_—Ñ–æ—Ä–º–∞—Ç", ("", ""))  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if not phone:
        phone, _ = format_phone(client_data['–¢–µ–ª–µ—Ñ–æ–Ω'])

    context = {
        "NUM": contract_num.replace("-–ò–ü", ""),
        "FULL_NUM": contract_num,
        "DATE": get_current_date(),
        "FIO": full_name,
        "FULL_FIO": full_name,
        "SHORT_FIO": f"{client_data['–§–∞–º–∏–ª–∏—è']} {client_data['–ò–º—è'][0]}. {client_data['–û—Ç—á–µ—Å—Ç–≤–æ'][0]}.",
        "CAR": client_data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ'],
        "VIN": client_data['VIN'],
        "CAR_INFO": car_info,
        "ADDRESS": client_data['–ê–¥—Ä–µ—Å'],
        "INDEX": client_data['–ò–Ω–¥–µ–∫—Å'],
        "PASSPORT": client_data['–ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä)'],
        "ISSUED_BY": client_data['–ö–µ–º –≤—ã–¥–∞–Ω'],
        "ISSUE_DATE": client_data['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏'],
        "DEP_CODE": client_data['–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'],
        "BIRTH_DATE": client_data['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'],
        "PHONE": phone,
        "COMPANY": COMPANY_NAME,
        "APP_NAME": APP_NAME
    }

    # –ò–º—è —Ñ–∞–π–ª–∞
    safe_fio = sanitize_filename(full_name)
    safe_index = client_data['–ò–Ω–¥–µ–∫—Å'] if '*' not in client_data['–ò–Ω–¥–µ–∫—Å'] else "–ò–ù–î–ï–ö–°"
    filename = f"–î–æ–≥–æ–≤–æ—Ä ‚Ññ{contract_num} ({safe_fio})_{safe_index}.docx"
    output_path = OUTPUT_DIR / filename

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    success = fill_template(CONTRACT_TEMPLATE, output_path, context)
    return success


# --- –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_phone(phone: str) -> tuple[str, str]:
    """–î—É–±–ª–∏—Ä—É–µ–º –∏–∑ utils, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)"""
    from core.utils import format_phone as util_format
    return util_format(phone)


def generate_invoice(
    client_data: dict,
    contract_num: str,
    service_type: str,
    amount: int,
    payment_method: str = "card"
) -> bool:
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω —Å—á—ë—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {–∫–ª—é—á–µ–π}
    """
    # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    if payment_method == "card":
        template_path = INVOICE_CARD_TEMPLATE
    else:
        template_path = INVOICE_TEMPLATE

    output_filename = (f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å—á–µ—Ç{' –ù–ê –ö–ê–†–¢–£ ' if payment_method == 'card' else ' '}‚Ññ {contract_num[:3]}-001 –æ—Ç"
                       f" {get_current_date()} –¥–ª—è {client_data['–§–∞–º–∏–ª–∏—è']} {client_data['–ò–º—è']} "
                       f"{client_data['–û—Ç—á–µ—Å—Ç–≤–æ']}_{client_data['–ò–Ω–¥–µ–∫—Å']}.docx")
    output_path = OUTPUT_DIR / sanitize_filename(output_filename)

    try:
        if not template_path.exists():
            logging.error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return False

        doc = Document(template_path)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª—É–≥—É
        service_desc = "–≤—ã–ø—É—Å–∫—É –°–ë–ö–¢–° + –≠–ü–¢–°" if service_type == "sbkts" else "—Å–ø–∏—Å–∞–Ω–∏—é —É—Ç–∏–ª—å—Å–±–æ—Ä–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        current_date = get_current_date()  # "03.10.2025"
        verbose_date = get_date_verbose(current_date)  # "3 –æ–∫—Ç—è–±—Ä—è 2025 –≥."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            "NUM": contract_num[:3],
            "DATE": get_current_date(),
            "VERBOSE_DATE": verbose_date,
            "FIO": f"{client_data['–§–∞–º–∏–ª–∏—è']} {client_data['–ò–º—è']} {client_data['–û—Ç—á–µ—Å—Ç–≤–æ']}",
            "ADDRESS": client_data['–ê–¥—Ä–µ—Å'],
            "SERVICE": service_desc,
            "CAR": f"{client_data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ']}_vin {client_data['VIN']}",
            "AMOUNT": f"{amount:.2f}".replace('.00', ''),  # –ë–µ–∑ .00
            "AMOUNT_RUB": f"{amount} —Ä—É–±.",
            "AMOUNT_TEXT": number_to_words(amount // 1000).capitalize() + " —Ç—ã—Å—è—á",
            "CONTRACT_REF": contract_num
        }

        # --- –ó–∞–º–µ–Ω–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö ---
        for paragraph in doc.paragraphs:
            replace_placeholders_in_paragraph(paragraph, context)

        # --- –ó–∞–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö ---
        for table in doc.tables:
            replace_placeholders_in_table(table, context)

        doc.save(output_path)
        logging.info(f"‚úÖ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True

    except Exception as e:
        logging.error(f"üî¥ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á—ë—Ç–∞: {e}")
        return False
